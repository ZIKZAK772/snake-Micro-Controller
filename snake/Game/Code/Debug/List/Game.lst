
AVRASM ver. 2.1.30  C:\Users\Khalinkara\Documents\AVR\Game\Code\Debug\List\Game.asm Wed Jan 15 23:20:54 2020

C:\Users\Khalinkara\Documents\AVR\Game\Code\Debug\List\Game.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Khalinkara\Documents\AVR\Game\Code\Debug\List\Game.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Khalinkara\Documents\AVR\Game\Code\Debug\List\Game.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\Khalinkara\Documents\AVR\Game\Code\Debug\List\Game.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\Khalinkara\Documents\AVR\Game\Code\Debug\List\Game.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\Khalinkara\Documents\AVR\Game\Code\Debug\List\Game.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\Khalinkara\Documents\AVR\Game\Code\Debug\List\Game.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\Khalinkara\Documents\AVR\Game\Code\Debug\List\Game.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\Khalinkara\Documents\AVR\Game\Code\Debug\List\Game.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\Khalinkara\Documents\AVR\Game\Code\Debug\List\Game.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _not=R4
                 	.DEF _not_msb=R5
                 	.DEF _dir=R6
                 	.DEF _dir_msb=R7
                 	.DEF _lastdir=R8
                 	.DEF _lastdir_msb=R9
                 	.DEF _ttt=R10
                 	.DEF _ttt_msb=R11
                 	.DEF _tt=R12
                 	.DEF _tt_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0043 	JMP  __RESET
000002 940c 00df 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0097 	JMP  _timer2_ovf_isr
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0070 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00002a 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002b 0000
00002c 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
00002d 063f
00002e 4f5b
00002f 6d66
000030 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
000031 677f      	.DB  0x7F,0x67
                 _0x4:
000032 fdfe
000033 f7fb
000034 dfef
000035 7fbf      	.DB  0xFE,0xFD,0xFB,0xF7,0xEF,0xDF,0xBF,0x7F
                 
                 __GLOBAL_INI_TBL:
000036 0001      	.DW  0x01
000037 0002      	.DW  0x02
000038 0054      	.DW  __REG_BIT_VARS*2
                 
000039 0004      	.DW  0x04
00003a 000a      	.DW  0x0A
00003b 0056      	.DW  __REG_VARS*2
                 
00003c 000a      	.DW  0x0A
00003d 0160      	.DW  __7SEGPTRN
00003e 005a      	.DW  _0x3*2
                 
00003f 0008      	.DW  0x08
000040 016a      	.DW  _ptrn
000041 0064      	.DW  _0x4*2
                 
                 _0xFFFFFFFF:
000042 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000043 94f8      	CLI
000044 27ee      	CLR  R30
000045 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000046 e0f1      	LDI  R31,1
000047 bffb      	OUT  GICR,R31
000048 bfeb      	OUT  GICR,R30
000049 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004a e08d      	LDI  R24,(14-2)+1
00004b e0a2      	LDI  R26,2
00004c 27bb      	CLR  R27
                 __CLEAR_REG:
00004d 93ed      	ST   X+,R30
00004e 958a      	DEC  R24
00004f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000050 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000051 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000052 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000053 93ed      	ST   X+,R30
000054 9701      	SBIW R24,1
000055 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000056 e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000057 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000058 9185      	LPM  R24,Z+
000059 9195      	LPM  R25,Z+
00005a 9700      	SBIW R24,0
00005b f061      	BREQ __GLOBAL_INI_END
00005c 91a5      	LPM  R26,Z+
00005d 91b5      	LPM  R27,Z+
00005e 9005      	LPM  R0,Z+
00005f 9015      	LPM  R1,Z+
000060 01bf      	MOVW R22,R30
000061 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000062 9005      	LPM  R0,Z+
000063 920d      	ST   X+,R0
000064 9701      	SBIW R24,1
000065 f7e1      	BRNE __GLOBAL_INI_LOOP
000066 01fb      	MOVW R30,R22
000067 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000068 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000069 bfed      	OUT  SPL,R30
00006a e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006d e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006e 940c 0118 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#define COL 8
                 ;#define ROW 16
                 ;
                 ;#define DOT_PIXELS 8
                 ;
                 ;#define DMC PORTD.0
                 ;
                 ;#define _7SEG PORTB
                 ;
                 ;#define TRUE 1
                 ;#define FALSE 0
                 ;
                 ;#define D1 PORTA
                 ;#define D2 PORTC
                 ;
                 ;#define STOP PIND.3
                 ;#define UP PIND.4
                 ;#define RIGHT PIND.5
                 ;#define DOWN PIND.6
                 ;#define LEFT PIND.7
                 ;
                 ;#define S 0
                 ;#define U 1
                 ;#define R 2
                 ;#define D 3
                 ;#define L 4
                 ;#define EMP 0
                 ;#define SNK 1
                 ;#define FOD 2
                 ;
                 ;char _7SEGPTRN[10] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x67};
                 
                 	.DSEG
                 ;char ptrn[8] = {~0x01,~0x02,~0x04,~0x08,~0x10,~0x20,~0x40,~0x80};
                 ;
                 ;// Game Data
                 ;
                 ;struct point {
                 ;    char x,y;
                 ;}food,last,head[ROW * COL];
                 ;
                 ;int map [ROW][COL];
                 ;
                 ;int not;
                 ;int dir;
                 ;int lastdir;
                 ;
                 ;bit win;
                 ;bit gameover;
                 ;
                 ;void Initial();
                 ;void Logic();
                 ;void UPD();
                 ;void Show();
                 ;void Show_On_LED();
                 ;void CHFOD();
                 ;void INC();
                 ;void SET(int ,int ,int );
                 ;
                 ;int ttt = 0;
                 ;int tt = 0;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0040 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000070 920a      	ST   -Y,R0
000071 921a      	ST   -Y,R1
000072 92fa      	ST   -Y,R15
000073 936a      	ST   -Y,R22
000074 937a      	ST   -Y,R23
000075 938a      	ST   -Y,R24
000076 939a      	ST   -Y,R25
000077 93aa      	ST   -Y,R26
000078 93ba      	ST   -Y,R27
000079 93ea      	ST   -Y,R30
00007a 93fa      	ST   -Y,R31
00007b b7ef      	IN   R30,SREG
00007c 93ea      	ST   -Y,R30
                 ; 0000 0041     //LOGIC
                 ; 0000 0042     tt++;
00007d 01f6      	MOVW R30,R12
00007e 9631      	ADIW R30,1
00007f 016f      	MOVW R12,R30
                 ; 0000 0043     if(tt==20){
000080 e1e4      	LDI  R30,LOW(20)
000081 e0f0      	LDI  R31,HIGH(20)
000082 15ec      	CP   R30,R12
000083 05fd      	CPC  R31,R13
000084 f421      	BRNE _0x5
                 ; 0000 0044     if(!gameover)
000085 fe21      	SBRS R2,1
                 ; 0000 0045         Logic();
000086 d10c      	RCALL _Logic
                 ; 0000 0046     tt=0;
000087 24cc      	CLR  R12
000088 24dd      	CLR  R13
                 ; 0000 0047     }
                 ; 0000 0048 }
                 _0x5:
000089 91e9      	LD   R30,Y+
00008a bfef      	OUT  SREG,R30
00008b 91f9      	LD   R31,Y+
00008c 91e9      	LD   R30,Y+
00008d 91b9      	LD   R27,Y+
00008e 91a9      	LD   R26,Y+
00008f 9199      	LD   R25,Y+
000090 9189      	LD   R24,Y+
000091 9179      	LD   R23,Y+
000092 9169      	LD   R22,Y+
000093 90f9      	LD   R15,Y+
000094 9019      	LD   R1,Y+
000095 9009      	LD   R0,Y+
000096 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 004B {
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
000097 920a      	ST   -Y,R0
000098 921a      	ST   -Y,R1
000099 939a      	ST   -Y,R25
00009a 93aa      	ST   -Y,R26
00009b 93ba      	ST   -Y,R27
00009c 93ea      	ST   -Y,R30
00009d 93fa      	ST   -Y,R31
00009e b7ef      	IN   R30,SREG
00009f 93ea      	ST   -Y,R30
                 ; 0000 004C  bit P;
                 ; 0000 004D // 7SEG
                 ; 0000 004E     if(not<10){
                 ;	P -> R15.0
0000a0 e0ea      	LDI  R30,LOW(10)
0000a1 e0f0      	LDI  R31,HIGH(10)
0000a2 164e      	CP   R4,R30
0000a3 065f      	CPC  R5,R31
0000a4 f47c      	BRGE _0x7
                 ; 0000 004F         if(ttt<=5)
0000a5 d253      	RCALL SUBOPT_0x0
0000a6 f03c      	BRLT _0x8
                 ; 0000 0050         _7SEG = (1<<7) | _7SEGPTRN[not];
0000a7 e6a0      	LDI  R26,LOW(__7SEGPTRN)
0000a8 e0b1      	LDI  R27,HIGH(__7SEGPTRN)
0000a9 0da4      	ADD  R26,R4
0000aa 1db5      	ADC  R27,R5
0000ab 91ec      	LD   R30,X
0000ac 68e0      	ORI  R30,0x80
0000ad bbe8      	OUT  0x18,R30
                 ; 0000 0051         if(ttt>5)
                 _0x8:
0000ae d24a      	RCALL SUBOPT_0x0
0000af f41c      	BRGE _0x9
                 ; 0000 0052         _7SEG = (0<<7) | _7SEGPTRN[0];
0000b0 91e0 0160 	LDS  R30,__7SEGPTRN
0000b2 bbe8      	OUT  0x18,R30
                 ; 0000 0053     }
                 _0x9:
                 ; 0000 0054     else
0000b3 c017      	RJMP _0xA
                 _0x7:
                 ; 0000 0055     {
                 ; 0000 0056          if(ttt<=5)
0000b4 d244      	RCALL SUBOPT_0x0
0000b5 f054      	BRLT _0xB
                 ; 0000 0057         _7SEG = (1<<7) | _7SEGPTRN[not%10];
0000b6 01d2      	MOVW R26,R4
0000b7 e0ea      	LDI  R30,LOW(10)
0000b8 e0f0      	LDI  R31,HIGH(10)
0000b9 940e 0380 	CALL __MODW21
0000bb 5ae0      	SUBI R30,LOW(-__7SEGPTRN)
0000bc 4ffe      	SBCI R31,HIGH(-__7SEGPTRN)
0000bd 81e0      	LD   R30,Z
0000be 68e0      	ORI  R30,0x80
0000bf bbe8      	OUT  0x18,R30
                 ; 0000 0058         if(ttt>5)
                 _0xB:
0000c0 d238      	RCALL SUBOPT_0x0
0000c1 f44c      	BRGE _0xC
                 ; 0000 0059         _7SEG = (0<<7) | _7SEGPTRN[not/10];
0000c2 01d2      	MOVW R26,R4
0000c3 e0ea      	LDI  R30,LOW(10)
0000c4 e0f0      	LDI  R31,HIGH(10)
0000c5 940e 037b 	CALL __DIVW21
0000c7 5ae0      	SUBI R30,LOW(-__7SEGPTRN)
0000c8 4ffe      	SBCI R31,HIGH(-__7SEGPTRN)
0000c9 81e0      	LD   R30,Z
0000ca bbe8      	OUT  0x18,R30
                 ; 0000 005A     }
                 _0xC:
                 _0xA:
                 ; 0000 005B if(ttt == 10)
0000cb e0ea      	LDI  R30,LOW(10)
0000cc e0f0      	LDI  R31,HIGH(10)
0000cd 15ea      	CP   R30,R10
0000ce 05fb      	CPC  R31,R11
0000cf f411      	BRNE _0xD
                 ; 0000 005C ttt=0;
0000d0 24aa      	CLR  R10
0000d1 24bb      	CLR  R11
                 ; 0000 005D ttt++;
                 _0xD:
0000d2 01f5      	MOVW R30,R10
0000d3 9631      	ADIW R30,1
0000d4 015f      	MOVW R10,R30
                 ; 0000 005E }
0000d5 91e9      	LD   R30,Y+
0000d6 bfef      	OUT  SREG,R30
0000d7 91f9      	LD   R31,Y+
0000d8 91e9      	LD   R30,Y+
0000d9 91b9      	LD   R27,Y+
0000da 91a9      	LD   R26,Y+
0000db 9199      	LD   R25,Y+
0000dc 9019      	LD   R1,Y+
0000dd 9009      	LD   R0,Y+
0000de 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0064 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
0000df 93ea      	ST   -Y,R30
0000e0 93fa      	ST   -Y,R31
0000e1 b7ef      	IN   R30,SREG
0000e2 93ea      	ST   -Y,R30
                 ; 0000 0065 // Place your code here
                 ; 0000 0066 if(STOP){
0000e3 9b83      	SBIS 0x10,3
0000e4 c003      	RJMP _0xE
                 ; 0000 0067   dir = S;
0000e5 2466      	CLR  R6
0000e6 2477      	CLR  R7
                 ; 0000 0068 }
                 ; 0000 0069 else if(UP)
0000e7 c02b      	RJMP _0xF
                 _0xE:
0000e8 9b84      	SBIS 0x10,4
0000e9 c009      	RJMP _0x10
                 ; 0000 006A {
                 ; 0000 006B     if(lastdir!=D)
0000ea e0e3      	LDI  R30,LOW(3)
0000eb e0f0      	LDI  R31,HIGH(3)
0000ec 15e8      	CP   R30,R8
0000ed 05f9      	CPC  R31,R9
0000ee f019      	BREQ _0x11
                 ; 0000 006C         dir = U;
0000ef e0e1      	LDI  R30,LOW(1)
0000f0 e0f0      	LDI  R31,HIGH(1)
0000f1 013f      	MOVW R6,R30
                 ; 0000 006D }
                 _0x11:
                 ; 0000 006E else if(RIGHT)
0000f2 c020      	RJMP _0x12
                 _0x10:
0000f3 9b85      	SBIS 0x10,5
0000f4 c009      	RJMP _0x13
                 ; 0000 006F {   if(lastdir!=L)
0000f5 e0e4      	LDI  R30,LOW(4)
0000f6 e0f0      	LDI  R31,HIGH(4)
0000f7 15e8      	CP   R30,R8
0000f8 05f9      	CPC  R31,R9
0000f9 f019      	BREQ _0x14
                 ; 0000 0070         dir = R;
0000fa e0e2      	LDI  R30,LOW(2)
0000fb e0f0      	LDI  R31,HIGH(2)
0000fc 013f      	MOVW R6,R30
                 ; 0000 0071 
                 ; 0000 0072 }
                 _0x14:
                 ; 0000 0073 else if(DOWN)
0000fd c015      	RJMP _0x15
                 _0x13:
0000fe 9b86      	SBIS 0x10,6
0000ff c009      	RJMP _0x16
                 ; 0000 0074 {
                 ; 0000 0075     if(lastdir!=U)
000100 e0e1      	LDI  R30,LOW(1)
000101 e0f0      	LDI  R31,HIGH(1)
000102 15e8      	CP   R30,R8
000103 05f9      	CPC  R31,R9
000104 f019      	BREQ _0x17
                 ; 0000 0076         dir = D;
000105 e0e3      	LDI  R30,LOW(3)
000106 e0f0      	LDI  R31,HIGH(3)
000107 013f      	MOVW R6,R30
                 ; 0000 0077 }
                 _0x17:
                 ; 0000 0078 else if(LEFT)
000108 c00a      	RJMP _0x18
                 _0x16:
000109 9b87      	SBIS 0x10,7
00010a c008      	RJMP _0x19
                 ; 0000 0079 {
                 ; 0000 007A     if(lastdir!=R)
00010b e0e2      	LDI  R30,LOW(2)
00010c e0f0      	LDI  R31,HIGH(2)
00010d 15e8      	CP   R30,R8
00010e 05f9      	CPC  R31,R9
00010f f019      	BREQ _0x1A
                 ; 0000 007B         dir = L;
000110 e0e4      	LDI  R30,LOW(4)
000111 e0f0      	LDI  R31,HIGH(4)
000112 013f      	MOVW R6,R30
                 ; 0000 007C }
                 _0x1A:
                 ; 0000 007D 
                 ; 0000 007E }
                 _0x19:
                 _0x18:
                 _0x15:
                 _0x12:
                 _0xF:
000113 91e9      	LD   R30,Y+
000114 bfef      	OUT  SREG,R30
000115 91f9      	LD   R31,Y+
000116 91e9      	LD   R30,Y+
000117 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0081 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0082 // Declare your local variables here
                 ; 0000 0083 
                 ; 0000 0084 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
000118 efef      	LDI  R30,LOW(255)
000119 bbea      	OUT  0x1A,R30
                 ; 0000 0085 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00011a e0e0      	LDI  R30,LOW(0)
00011b bbeb      	OUT  0x1B,R30
                 ; 0000 0086 
                 ; 0000 0087 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
00011c efef      	LDI  R30,LOW(255)
00011d bbe7      	OUT  0x17,R30
                 ; 0000 0088 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00011e e0e0      	LDI  R30,LOW(0)
00011f bbe8      	OUT  0x18,R30
                 ; 0000 0089 
                 ; 0000 008A DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000120 efef      	LDI  R30,LOW(255)
000121 bbe4      	OUT  0x14,R30
                 ; 0000 008B PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000122 e0e0      	LDI  R30,LOW(0)
000123 bbe5      	OUT  0x15,R30
                 ; 0000 008C 
                 ; 0000 008D DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (1<<DDD0);
000124 e0e1      	LDI  R30,LOW(1)
000125 bbe1      	OUT  0x11,R30
                 ; 0000 008E PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000126 e0e0      	LDI  R30,LOW(0)
000127 bbe2      	OUT  0x12,R30
                 ; 0000 008F 
                 ; 0000 0090 // Timer/Counter 0 initialization
                 ; 0000 0091 // Clock source: System Clock
                 ; 0000 0092 // Clock value: 8000.000 kHz
                 ; 0000 0093 // Mode: Normal top=0xFF
                 ; 0000 0094 // OC0 output: Disconnected
                 ; 0000 0095 // Timer Period: 0.032 ms
                 ; 0000 0096 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
000128 e0e4      	LDI  R30,LOW(4)
000129 bfe3      	OUT  0x33,R30
                 ; 0000 0097 TCNT0=0x00;
00012a e0e0      	LDI  R30,LOW(0)
00012b bfe2      	OUT  0x32,R30
                 ; 0000 0098 OCR0=0x00;
00012c bfec      	OUT  0x3C,R30
                 ; 0000 0099 
                 ; 0000 009A // Timer/Counter 2 initialization
                 ; 0000 009B // Clock source: System Clock
                 ; 0000 009C // Clock value: 8000.000 kHz
                 ; 0000 009D // Mode: Normal top=0xFF
                 ; 0000 009E // OC2 output: Disconnected
                 ; 0000 009F // Timer Period: 0.032 ms
                 ; 0000 00A0 ASSR=0<<AS2;
00012d bde2      	OUT  0x22,R30
                 ; 0000 00A1 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (1<<CS20);
00012e e0e1      	LDI  R30,LOW(1)
00012f bde5      	OUT  0x25,R30
                 ; 0000 00A2 TCNT2=0x00;
000130 e0e0      	LDI  R30,LOW(0)
000131 bde4      	OUT  0x24,R30
                 ; 0000 00A3 OCR2=0x00;
000132 bde3      	OUT  0x23,R30
                 ; 0000 00A4 
                 ; 0000 00A5 
                 ; 0000 00A6 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00A7 TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
000133 e4e1      	LDI  R30,LOW(65)
000134 bfe9      	OUT  0x39,R30
                 ; 0000 00A8 
                 ; 0000 00A9 // External Interrupt(s) initialization
                 ; 0000 00AA // INT0: On
                 ; 0000 00AB // INT0 Mode: Rising Edge
                 ; 0000 00AC // INT1: Off
                 ; 0000 00AD // INT2: Off
                 ; 0000 00AE GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
000135 b7eb      	IN   R30,0x3B
000136 64e0      	ORI  R30,0x40
000137 bfeb      	OUT  0x3B,R30
                 ; 0000 00AF MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
000138 e0e3      	LDI  R30,LOW(3)
000139 bfe5      	OUT  0x35,R30
                 ; 0000 00B0 MCUCSR=(0<<ISC2);
00013a e0e0      	LDI  R30,LOW(0)
00013b bfe4      	OUT  0x34,R30
                 ; 0000 00B1 GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
00013c e4e0      	LDI  R30,LOW(64)
00013d bfea      	OUT  0x3A,R30
                 ; 0000 00B2 
                 ; 0000 00B3 // Global enable interrupts
                 ; 0000 00B4 #asm("sei")
00013e 9478      	sei
                 ; 0000 00B5 
                 ; 0000 00B6 while (1)
                 _0x1B:
                 ; 0000 00B7       {
                 ; 0000 00B8 
                 ; 0000 00B9             Initial();
00013f d006      	RCALL _Initial
                 ; 0000 00BA 
                 ; 0000 00BB             while(!gameover) {
                 _0x1E:
000140 fc21      	SBRC R2,1
000141 c002      	RJMP _0x20
                 ; 0000 00BC                 Show();
000142 d133      	RCALL _Show
                 ; 0000 00BD             }
000143 cffc      	RJMP _0x1E
                 _0x20:
                 ; 0000 00BE 
                 ; 0000 00BF       }
000144 cffa      	RJMP _0x1B
                 ; 0000 00C0 }
                 _0x21:
000145 cfff      	RJMP _0x21
                 ; .FEND
                 ;
                 ;void Initial(){
                 ; 0000 00C2 void Initial(){
                 _Initial:
                 ; .FSTART _Initial
                 ; 0000 00C3 
                 ; 0000 00C4    int r,c;
                 ; 0000 00C5 
                 ; 0000 00C6    for(r=0;r<ROW;r++)
000146 940e 03b0 	CALL __SAVELOCR4
                 ;	r -> R16,R17
                 ;	c -> R18,R19
                +
000148 e000     +LDI R16 , LOW ( 0 )
000149 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x23:
                +
00014a 3100     +CPI R16 , LOW ( 16 )
00014b e0e0     +LDI R30 , HIGH ( 16 )
00014c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,16
00014d f4ac      	BRGE _0x24
                 ; 0000 00C7     for(c=0;c<COL;c++)
                +
00014e e020     +LDI R18 , LOW ( 0 )
00014f e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x26:
                +
000150 3028     +CPI R18 , LOW ( 8 )
000151 e0e0     +LDI R30 , HIGH ( 8 )
000152 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000153 f464      	BRGE _0x27
                 ; 0000 00C8         map[r][c] = 0;
000154 01f8      	MOVW R30,R16
000155 d1a8      	RCALL SUBOPT_0x1
000156 01df      	MOVW R26,R30
000157 01f9      	MOVW R30,R18
000158 d1aa      	RCALL SUBOPT_0x2
000159 e0e0      	LDI  R30,LOW(0)
00015a e0f0      	LDI  R31,HIGH(0)
00015b 93ed      	ST   X+,R30
00015c 93fc      	ST   X,R31
                +
00015d 5f2f     +SUBI R18 , LOW ( - 1 )
00015e 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00015f cff0      	RJMP _0x26
                 _0x27:
                 ; 0000 00CA gameover = 0;
                +
000160 5f0f     +SUBI R16 , LOW ( - 1 )
000161 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000162 cfe7      	RJMP _0x23
                 _0x24:
000163 94e8      	CLT
000164 f821      	BLD  R2,1
                 ; 0000 00CB     win = FALSE;
000165 f820      	BLD  R2,0
                 ; 0000 00CC 
                 ; 0000 00CD     dir = S;
000166 2466      	CLR  R6
000167 2477      	CLR  R7
                 ; 0000 00CE     lastdir = S;
000168 2488      	CLR  R8
000169 2499      	CLR  R9
                 ; 0000 00CF 
                 ; 0000 00D0     not = 0;
00016a 2444      	CLR  R4
00016b 2455      	CLR  R5
                 ; 0000 00D1 
                 ; 0000 00D2     food.x = 1;
00016c e0e1      	LDI  R30,LOW(1)
00016d 93e0 0172 	STS  _food,R30
                 ; 0000 00D3     food.y = 5;
00016f e0e5      	LDI  R30,LOW(5)
                +
000170 93e0 0173+STS _food + ( 1 ) , R30
                 	__PUTB1MN _food,1
                 ; 0000 00D4 
                 ; 0000 00D5     head[0].x = 1;
000172 e0e1      	LDI  R30,LOW(1)
000173 93e0 0176 	STS  _head,R30
                 ; 0000 00D6     head[0].y = 1;
                +
000175 93e0 0177+STS _head + ( 1 ) , R30
                 	__PUTB1MN _head,1
                 ; 0000 00D7 
                 ; 0000 00D8     last.x = head[0].x;
000177 93e0 0174 	STS  _last,R30
                 ; 0000 00D9     last.y = head[0].y;
                +
000179 91e0 0177+LDS R30 , _head + ( 1 )
                 	__GETB1MN _head,1
                +
00017b 93e0 0175+STS _last + ( 1 ) , R30
                 	__PUTB1MN _last,1
                 ; 0000 00DA 
                 ; 0000 00DB     for(r=1;r<ROW*COL;r++){
                +
00017d e001     +LDI R16 , LOW ( 1 )
00017e e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 _0x29:
                +
00017f 3800     +CPI R16 , LOW ( 128 )
000180 e0e0     +LDI R30 , HIGH ( 128 )
000181 071e     +CPC R17 , R30
                 	__CPWRN 16,17,128
000182 f464      	BRGE _0x2A
                 ; 0000 00DC         head[r].x = -1;
000183 01f8      	MOVW R30,R16
000184 d183      	RCALL SUBOPT_0x3
000185 efef      	LDI  R30,LOW(255)
000186 d184      	RCALL SUBOPT_0x4
                 ; 0000 00DD         head[r].y = -1;
000187 0fae      	ADD  R26,R30
000188 1fbf      	ADC  R27,R31
000189 9611      	ADIW R26,1
00018a efef      	LDI  R30,LOW(255)
00018b 93ec      	ST   X,R30
                 ; 0000 00DE     }
                +
00018c 5f0f     +SUBI R16 , LOW ( - 1 )
00018d 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00018e cff0      	RJMP _0x29
                 _0x2A:
                 ; 0000 00DF }
00018f 940e 03b7 	CALL __LOADLOCR4
000191 9624      	ADIW R28,4
000192 9508      	RET
                 ; .FEND
                 ;
                 ;void Logic(){
                 ; 0000 00E1 void Logic(){
                 _Logic:
                 ; .FSTART _Logic
                 ; 0000 00E2     int i;
                 ; 0000 00E3 
                 ; 0000 00E4     if(dir == S)
000193 931a      	ST   -Y,R17
000194 930a      	ST   -Y,R16
                 ;	i -> R16,R17
000195 2c06      	MOV  R0,R6
000196 2807      	OR   R0,R7
000197 f409      	BRNE _0x2B
                 ; 0000 00E5             return;
000198 c08f      	RJMP _0x2000002
                 ; 0000 00E6 
                 ; 0000 00E7         // Gameover || Win Chexk
                 ; 0000 00E8         if(not == ROW*COL-1)
                 _0x2B:
000199 e7ef      	LDI  R30,LOW(127)
00019a e0f0      	LDI  R31,HIGH(127)
00019b 15e4      	CP   R30,R4
00019c 05f5      	CPC  R31,R5
00019d f419      	BRNE _0x2C
                 ; 0000 00E9         {
                 ; 0000 00EA             gameover = TRUE;
00019e 9468      	SET
00019f f821      	BLD  R2,1
                 ; 0000 00EB             win = TRUE;
0001a0 f820      	BLD  R2,0
                 ; 0000 00EC         }
                 ; 0000 00ED 
                 ; 0000 00EE         // Update Tail
                 ; 0000 00EF         last.x = head[not].x;
                 _0x2C:
0001a1 01f2      	MOVW R30,R4
0001a2 d165      	RCALL SUBOPT_0x3
0001a3 91ec      	LD   R30,X
0001a4 93e0 0174 	STS  _last,R30
                 ; 0000 00F0         last.y = head[not].y;
0001a6 d16b      	RCALL SUBOPT_0x5
0001a7 d170      	RCALL SUBOPT_0x6
                +
0001a8 93e0 0175+STS _last + ( 1 ) , R30
                 	__PUTB1MN _last,1
                 ; 0000 00F1         for(i=not;i>0;i--)
0001aa 0182      	MOVW R16,R4
                 _0x2E:
0001ab 2400      	CLR  R0
0001ac 1600      	CP   R0,R16
0001ad 0601      	CPC  R0,R17
0001ae f4c4      	BRGE _0x2F
                 ; 0000 00F2         {
                 ; 0000 00F3             head[i].x = head[i-1].x;
0001af 01f8      	MOVW R30,R16
0001b0 d16c      	RCALL SUBOPT_0x7
0001b1 0fea      	ADD  R30,R26
0001b2 1ffb      	ADC  R31,R27
0001b3 010f      	MOVW R0,R30
0001b4 01f8      	MOVW R30,R16
0001b5 9731      	SBIW R30,1
0001b6 d151      	RCALL SUBOPT_0x3
0001b7 91ec      	LD   R30,X
0001b8 01d0      	MOVW R26,R0
0001b9 d151      	RCALL SUBOPT_0x4
                 ; 0000 00F4             head[i].y = head[i-1].y;
0001ba 0fea      	ADD  R30,R26
0001bb 1ffb      	ADC  R31,R27
0001bc 9631      	ADIW R30,1
0001bd 010f      	MOVW R0,R30
0001be 01f8      	MOVW R30,R16
0001bf 9731      	SBIW R30,1
0001c0 d15c      	RCALL SUBOPT_0x7
0001c1 d156      	RCALL SUBOPT_0x6
0001c2 01d0      	MOVW R26,R0
0001c3 93ec      	ST   X,R30
                 ; 0000 00F5 
                 ; 0000 00F6         }
                +
0001c4 5001     +SUBI R16 , LOW ( 1 )
0001c5 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
0001c6 cfe4      	RJMP _0x2E
                 _0x2F:
                 ; 0000 00F7 
                 ; 0000 00F8         // Move
                 ; 0000 00F9         switch (dir) {
0001c7 01f3      	MOVW R30,R6
                 ; 0000 00FA         case U:
0001c8 30e1      	CPI  R30,LOW(0x1)
0001c9 e0a0      	LDI  R26,HIGH(0x1)
0001ca 07fa      	CPC  R31,R26
0001cb f449      	BRNE _0x33
                 ; 0000 00FB             lastdir = U;
0001cc e0e1      	LDI  R30,LOW(1)
0001cd e0f0      	LDI  R31,HIGH(1)
0001ce 014f      	MOVW R8,R30
                 ; 0000 00FC             head[0].x++;
0001cf 91e0 0176 	LDS  R30,_head
0001d1 5fef      	SUBI R30,-LOW(1)
0001d2 93e0 0176 	STS  _head,R30
                 ; 0000 00FD             break;
0001d4 c028      	RJMP _0x32
                 ; 0000 00FE         case R:
                 _0x33:
0001d5 30e2      	CPI  R30,LOW(0x2)
0001d6 e0a0      	LDI  R26,HIGH(0x2)
0001d7 07fa      	CPC  R31,R26
0001d8 f451      	BRNE _0x34
                 ; 0000 00FF             lastdir = R;
0001d9 e0e2      	LDI  R30,LOW(2)
0001da e0f0      	LDI  R31,HIGH(2)
0001db 014f      	MOVW R8,R30
                 ; 0000 0100             head[0].y++;
                +
0001dc 91e0 0177+LDS R30 , _head + ( 1 )
                 	__GETB1MN _head,1
0001de 5fef      	SUBI R30,-LOW(1)
                +
0001df 93e0 0177+STS _head + ( 1 ) , R30
                 	__PUTB1MN _head,1
0001e1 50e1      	SUBI R30,LOW(1)
                 ; 0000 0101             break;
0001e2 c01a      	RJMP _0x32
                 ; 0000 0102         case D:
                 _0x34:
0001e3 30e3      	CPI  R30,LOW(0x3)
0001e4 e0a0      	LDI  R26,HIGH(0x3)
0001e5 07fa      	CPC  R31,R26
0001e6 f449      	BRNE _0x35
                 ; 0000 0103             lastdir = D;
0001e7 e0e3      	LDI  R30,LOW(3)
0001e8 e0f0      	LDI  R31,HIGH(3)
0001e9 014f      	MOVW R8,R30
                 ; 0000 0104             head[0].x--;
0001ea 91e0 0176 	LDS  R30,_head
0001ec 50e1      	SUBI R30,LOW(1)
0001ed 93e0 0176 	STS  _head,R30
                 ; 0000 0105             break;
0001ef c00d      	RJMP _0x32
                 ; 0000 0106         case L:
                 _0x35:
0001f0 30e4      	CPI  R30,LOW(0x4)
0001f1 e0a0      	LDI  R26,HIGH(0x4)
0001f2 07fa      	CPC  R31,R26
0001f3 f449      	BRNE _0x32
                 ; 0000 0107             lastdir = L;
0001f4 e0e4      	LDI  R30,LOW(4)
0001f5 e0f0      	LDI  R31,HIGH(4)
0001f6 014f      	MOVW R8,R30
                 ; 0000 0108             head[0].y--;
                +
0001f7 91e0 0177+LDS R30 , _head + ( 1 )
                 	__GETB1MN _head,1
0001f9 50e1      	SUBI R30,LOW(1)
                +
0001fa 93e0 0177+STS _head + ( 1 ) , R30
                 	__PUTB1MN _head,1
0001fc 5fef      	SUBI R30,-LOW(1)
                 ; 0000 0109             break;
                 ; 0000 010A         }
                 _0x32:
                 ; 0000 010B 
                 ; 0000 010C         // Food Match
                 ; 0000 010D         CHFOD();
0001fd d02d      	RCALL _CHFOD
                 ; 0000 010E 
                 ; 0000 010F         // Hit Tail
                 ; 0000 0110         for(i=1;i<=not;i++)
                +
0001fe e001     +LDI R16 , LOW ( 1 )
0001ff e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 _0x38:
                +
000200 1640     +CP R4 , R16
000201 0651     +CPC R5 , R17
                 	__CPWRR 4,5,16,17
000202 f0ac      	BRLT _0x39
                 ; 0000 0111             if(head[0].x == head[i].x && head[0].y == head[i].y)
000203 01f8      	MOVW R30,R16
000204 d103      	RCALL SUBOPT_0x3
000205 91ec      	LD   R30,X
000206 91a0 0176 	LDS  R26,_head
000208 17ea      	CP   R30,R26
000209 f439      	BRNE _0x3B
00020a 01f8      	MOVW R30,R16
00020b d111      	RCALL SUBOPT_0x7
00020c d10b      	RCALL SUBOPT_0x6
                +
00020d 91a0 0177+LDS R26 , _head + ( 1 )
                 	__GETB2MN _head,1
00020f 17ea      	CP   R30,R26
000210 f009      	BREQ _0x3C
                 _0x3B:
000211 c003      	RJMP _0x3A
                 _0x3C:
                 ; 0000 0112             {
                 ; 0000 0113                 gameover = TRUE;
000212 9468      	SET
000213 f821      	BLD  R2,1
                 ; 0000 0114                 return;
000214 c013      	RJMP _0x2000002
                 ; 0000 0115             }
                 ; 0000 0116 
                 ; 0000 0117         // Hit wall
                 ; 0000 0118         if(head[0].x < 0 || head[0].x >= ROW || head[0].y < 0 || head[0].y >= COL)
                 _0x3A:
                +
000215 5f0f     +SUBI R16 , LOW ( - 1 )
000216 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000217 cfe8      	RJMP _0x38
                 _0x39:
000218 91a0 0176 	LDS  R26,_head
00021a 30a0      	CPI  R26,0
00021b f050      	BRLO _0x3E
00021c 31a0      	CPI  R26,LOW(0x10)
00021d f440      	BRSH _0x3E
                +
00021e 91a0 0177+LDS R26 , _head + ( 1 )
                 	__GETB2MN _head,1
000220 30a0      	CPI  R26,0
000221 f020      	BRLO _0x3E
                +
000222 91a0 0177+LDS R26 , _head + ( 1 )
                 	__GETB2MN _head,1
000224 30a8      	CPI  R26,LOW(0x8)
000225 f010      	BRLO _0x3D
                 _0x3E:
                 ; 0000 0119         {
                 ; 0000 011A             gameover=TRUE;
000226 9468      	SET
000227 f821      	BLD  R2,1
                 ; 0000 011B             return;
                 ; 0000 011C         }
                 ; 0000 011D }
                 _0x3D:
                 _0x2000002:
000228 9109      	LD   R16,Y+
000229 9119      	LD   R17,Y+
00022a 9508      	RET
                 ; .FEND
                 ;
                 ;void CHFOD() {
                 ; 0000 011F void CHFOD() {
                 _CHFOD:
                 ; .FSTART _CHFOD
                 ; 0000 0120 
                 ; 0000 0121         int i;
                 ; 0000 0122         int j;
                 ; 0000 0123         int r;
                 ; 0000 0124         int Counter = 0;
                 ; 0000 0125 
                 ; 0000 0126         struct point PossibleFoodLoc[(ROW*COL)-(not+1)];
                 ; 0000 0127 
                 ; 0000 0128         if(head[0].x == food.x && head[0].y == food.y) {
00022b 9722      	SBIW R28,2
00022c e0e0      	LDI  R30,LOW(0)
00022d 83e8      	ST   Y,R30
00022e 83e9      	STD  Y+1,R30
00022f 940e 03ae 	CALL __SAVELOCR6
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	r -> R20,R21
                 ;	Counter -> Y+6
                 ;	PossibleFoodLoc -> Y+6
000231 91e0 0172 	LDS  R30,_food
000233 91a0 0176 	LDS  R26,_head
000235 17ea      	CP   R30,R26
000236 f431      	BRNE _0x41
                +
000237 91a0 0177+LDS R26 , _head + ( 1 )
                 	__GETB2MN _head,1
                +
000239 91e0 0173+LDS R30 , _food + ( 1 )
                 	__GETB1MN _food,1
00023b 17ea      	CP   R30,R26
00023c f009      	BREQ _0x42
                 _0x41:
00023d c021      	RJMP _0x40
                 _0x42:
                 ; 0000 0129             // Replace Food
                 ; 0000 012A             SET(head[0].x, head[0].y, SNK);
00023e d0e3      	RCALL SUBOPT_0x8
                 ; 0000 012B 
                 ; 0000 012C             // Increase Tail
                 ; 0000 012D             INC();
00023f d020      	RCALL _INC
                 ; 0000 012E         /*
                 ; 0000 012F             // Change food loc
                 ; 0000 0130             for(i=0;i<ROW;i++)
                 ; 0000 0131                 for(j=0;j<COL;j++)
                 ; 0000 0132                     if(map[i][j] == 0)
                 ; 0000 0133                     {
                 ; 0000 0134                         PossibleFoodLoc[Counter].x = i;
                 ; 0000 0135                         PossibleFoodLoc[Counter].y = j;
                 ; 0000 0136                         Counter++;
                 ; 0000 0137                     }                    */
                 ; 0000 0138      /*       r = (int)TCNT0 % ((ROW*COL)-(not+1));
                 ; 0000 0139             food.x = PossibleFoodLoc[r].x;
                 ; 0000 013A             food.y = PossibleFoodLoc[r].y; */
                 ; 0000 013B             do{
                 _0x44:
                 ; 0000 013C             food.x = ((int)TCNT0*tt) % 8;
000240 b7e2      	IN   R30,0x32
000241 e0f0      	LDI  R31,0
000242 01df      	MOVW R26,R30
000243 01f6      	MOVW R30,R12
000244 940e 0363 	CALL __MULW12
000246 e0a7      	LDI  R26,LOW(7)
000247 e0b0      	LDI  R27,HIGH(7)
000248 940e 038e 	CALL __MANDW12
00024a 93e0 0172 	STS  _food,R30
                 ; 0000 013D             food.y = ((int)TCNT0) % 8;
00024c b7e2      	IN   R30,0x32
00024d e0f0      	LDI  R31,0
00024e e0a7      	LDI  R26,LOW(7)
00024f e0b0      	LDI  R27,HIGH(7)
000250 940e 038e 	CALL __MANDW12
                +
000252 93e0 0173+STS _food + ( 1 ) , R30
                 	__PUTB1MN _food,1
                 ; 0000 013E             }while(map[food.x][food.y]>0);
000254 91e0 0172 	LDS  R30,_food
000256 e0f0      	LDI  R31,0
000257 d0a6      	RCALL SUBOPT_0x1
000258 01df      	MOVW R26,R30
                +
000259 91e0 0173+LDS R30 , _food + ( 1 )
                 	__GETB1MN _food,1
00025b e0f0      	LDI  R31,0
00025c d0a6      	RCALL SUBOPT_0x2
00025d d0d1      	RCALL SUBOPT_0x9
00025e f30c      	BRLT _0x44
                 ; 0000 013F         }
                 ; 0000 0140     }
                 _0x40:
00025f c095      	RJMP _0x2000001
                 ; .FEND
                 ;
                 ;void INC() {
                 ; 0000 0142 void INC() {
                 _INC:
                 ; .FSTART _INC
                 ; 0000 0143     not++;
000260 01f2      	MOVW R30,R4
000261 9631      	ADIW R30,1
000262 012f      	MOVW R4,R30
                 ; 0000 0144     head[not].x = last.x;
000263 d0ae      	RCALL SUBOPT_0x5
000264 0fea      	ADD  R30,R26
000265 1ffb      	ADC  R31,R27
000266 91a0 0174 	LDS  R26,_last
000268 83a0      	STD  Z+0,R26
                 ; 0000 0145     head[not].y = last.y;
000269 d0a8      	RCALL SUBOPT_0x5
00026a 0fae      	ADD  R26,R30
00026b 1fbf      	ADC  R27,R31
00026c 9611      	ADIW R26,1
                +
00026d 91e0 0175+LDS R30 , _last + ( 1 )
                 	__GETB1MN _last,1
00026f 93ec      	ST   X,R30
                 ; 0000 0146     last.x = -1;
000270 efef      	LDI  R30,LOW(255)
000271 93e0 0174 	STS  _last,R30
                 ; 0000 0147     last.y = -1;
                +
000273 93e0 0175+STS _last + ( 1 ) , R30
                 	__PUTB1MN _last,1
                 ; 0000 0148 }
000275 9508      	RET
                 ; .FEND
                 ;
                 ;void Show() {
                 ; 0000 014A void Show() {
                 _Show:
                 ; .FSTART _Show
                 ; 0000 014B     UPD();
000276 d002      	RCALL _UPD
                 ; 0000 014C     Show_On_LED();
000277 d03e      	RCALL _Show_On_LED
                 ; 0000 014D }
000278 9508      	RET
                 ; .FEND
                 ;
                 ;void UPD() {
                 ; 0000 014F void UPD() {
                 _UPD:
                 ; .FSTART _UPD
                 ; 0000 0150     SET(last.x, last.y, EMP);
000279 91e0 0174 	LDS  R30,_last
00027b e0f0      	LDI  R31,0
00027c 93fa      	ST   -Y,R31
00027d 93ea      	ST   -Y,R30
                +
00027e 91e0 0175+LDS R30 , _last + ( 1 )
                 	__GETB1MN _last,1
000280 e0f0      	LDI  R31,0
000281 93fa      	ST   -Y,R31
000282 93ea      	ST   -Y,R30
000283 e0a0      	LDI  R26,LOW(0)
000284 e0b0      	LDI  R27,0
000285 d00f      	RCALL _SET
                 ; 0000 0151     SET(food.x, food.y, FOD);
000286 91e0 0172 	LDS  R30,_food
000288 e0f0      	LDI  R31,0
000289 93fa      	ST   -Y,R31
00028a 93ea      	ST   -Y,R30
                +
00028b 91e0 0173+LDS R30 , _food + ( 1 )
                 	__GETB1MN _food,1
00028d e0f0      	LDI  R31,0
00028e 93fa      	ST   -Y,R31
00028f 93ea      	ST   -Y,R30
000290 e0a2      	LDI  R26,LOW(2)
000291 e0b0      	LDI  R27,0
000292 d002      	RCALL _SET
                 ; 0000 0152     SET(head[0].x, head[0].y, SNK);
000293 d08e      	RCALL SUBOPT_0x8
                 ; 0000 0153 }
000294 9508      	RET
                 ; .FEND
                 ;
                 ;void SET(int X,int Y,int TYPE) {
                 ; 0000 0155 void SET(int X,int Y,int TYPE) {
                 _SET:
                 ; .FSTART _SET
                 ; 0000 0156     if(X >= 0 && X < ROW && Y >= 0 && Y < COL)
000295 93ba      	ST   -Y,R27
000296 93aa      	ST   -Y,R26
                 ;	X -> Y+4
                 ;	Y -> Y+2
                 ;	TYPE -> Y+0
000297 81ad      	LDD  R26,Y+5
000298 23aa      	TST  R26
000299 f05a      	BRMI _0x47
00029a 81ac      	LDD  R26,Y+4
00029b 81bd      	LDD  R27,Y+4+1
00029c 9750      	SBIW R26,16
00029d f43c      	BRGE _0x47
00029e 81ab      	LDD  R26,Y+3
00029f 23aa      	TST  R26
0002a0 f022      	BRMI _0x47
0002a1 81aa      	LDD  R26,Y+2
0002a2 81bb      	LDD  R27,Y+2+1
0002a3 9718      	SBIW R26,8
0002a4 f00c      	BRLT _0x48
                 _0x47:
0002a5 c00e      	RJMP _0x46
                 _0x48:
                 ; 0000 0157         map[X][Y] = TYPE;
0002a6 81ec      	LDD  R30,Y+4
0002a7 81fd      	LDD  R31,Y+4+1
0002a8 d055      	RCALL SUBOPT_0x1
0002a9 01df      	MOVW R26,R30
0002aa 81ea      	LDD  R30,Y+2
0002ab 81fb      	LDD  R31,Y+2+1
0002ac 0fee      	LSL  R30
0002ad 1fff      	ROL  R31
0002ae 0fea      	ADD  R30,R26
0002af 1ffb      	ADC  R31,R27
0002b0 81a8      	LD   R26,Y
0002b1 81b9      	LDD  R27,Y+1
0002b2 83a0      	STD  Z+0,R26
0002b3 83b1      	STD  Z+1,R27
                 ; 0000 0158 }
                 _0x46:
0002b4 9626      	ADIW R28,6
0002b5 9508      	RET
                 ; .FEND
                 ;
                 ;void Show_On_LED(){
                 ; 0000 015A void Show_On_LED(){
                 _Show_On_LED:
                 ; .FSTART _Show_On_LED
                 ; 0000 015B     char Temp_Data;
                 ; 0000 015C     int r,c;
                 ; 0000 015D     int temp;
                 ; 0000 015E 
                 ; 0000 015F     for(c=0;c<COL;c++){
0002b6 9722      	SBIW R28,2
0002b7 940e 03ae 	CALL __SAVELOCR6
                 ;	Temp_Data -> R17
                 ;	r -> R18,R19
                 ;	c -> R20,R21
                 ;	temp -> Y+6
                +
0002b9 e040     +LDI R20 , LOW ( 0 )
0002ba e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x4A:
                +
0002bb 3048     +CPI R20 , LOW ( 8 )
0002bc e0e0     +LDI R30 , HIGH ( 8 )
0002bd 075e     +CPC R21 , R30
                 	__CPWRN 20,21,8
0002be f5b4      	BRGE _0x4B
                 ; 0000 0160 
                 ; 0000 0161     for(r=0,Temp_Data = 0x00;r<DOT_PIXELS;r++){
                +
0002bf e020     +LDI R18 , LOW ( 0 )
0002c0 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0002c1 e010      	LDI  R17,LOW(0)
                 _0x4D:
                +
0002c2 3028     +CPI R18 , LOW ( 8 )
0002c3 e0e0     +LDI R30 , HIGH ( 8 )
0002c4 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0002c5 f484      	BRGE _0x4E
                 ; 0000 0162         temp = (map[r][c] > 0)? 1 : 0;
0002c6 01f9      	MOVW R30,R18
0002c7 d036      	RCALL SUBOPT_0x1
0002c8 01df      	MOVW R26,R30
0002c9 01fa      	MOVW R30,R20
0002ca d038      	RCALL SUBOPT_0x2
0002cb d063      	RCALL SUBOPT_0x9
0002cc f41c      	BRGE _0x4F
0002cd e0e1      	LDI  R30,LOW(1)
0002ce e0f0      	LDI  R31,HIGH(1)
0002cf c002      	RJMP _0x50
                 _0x4F:
0002d0 e0e0      	LDI  R30,LOW(0)
0002d1 e0f0      	LDI  R31,HIGH(0)
                 _0x50:
0002d2 d061      	RCALL SUBOPT_0xA
                 ; 0000 0163         Temp_Data = Temp_Data | (temp << r);
                 ; 0000 0164     }
                +
0002d3 5f2f     +SUBI R18 , LOW ( - 1 )
0002d4 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002d5 cfec      	RJMP _0x4D
                 _0x4E:
                 ; 0000 0165 
                 ; 0000 0166     DMC = 0;
0002d6 9890      	CBI  0x12,0
                 ; 0000 0167     D1 = 0x00;
0002d7 d064      	RCALL SUBOPT_0xB
                 ; 0000 0168     D2 = ptrn[c];
                 ; 0000 0169     D1 = Temp_Data;
                 ; 0000 016A 
                 ; 0000 016B 
                 ; 0000 016C     for(r=0,Temp_Data = 0x00;r<DOT_PIXELS;r++){
                +
0002d8 e020     +LDI R18 , LOW ( 0 )
0002d9 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0002da e010      	LDI  R17,LOW(0)
                 _0x55:
                +
0002db 3028     +CPI R18 , LOW ( 8 )
0002dc e0e0     +LDI R30 , HIGH ( 8 )
0002dd 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0002de f48c      	BRGE _0x56
                 ; 0000 016D         temp = (map[r+DOT_PIXELS][c] > 0)? 1 : 0;
0002df 01f9      	MOVW R30,R18
0002e0 9638      	ADIW R30,8
0002e1 d01c      	RCALL SUBOPT_0x1
0002e2 01df      	MOVW R26,R30
0002e3 01fa      	MOVW R30,R20
0002e4 d01e      	RCALL SUBOPT_0x2
0002e5 d049      	RCALL SUBOPT_0x9
0002e6 f41c      	BRGE _0x57
0002e7 e0e1      	LDI  R30,LOW(1)
0002e8 e0f0      	LDI  R31,HIGH(1)
0002e9 c002      	RJMP _0x58
                 _0x57:
0002ea e0e0      	LDI  R30,LOW(0)
0002eb e0f0      	LDI  R31,HIGH(0)
                 _0x58:
0002ec d047      	RCALL SUBOPT_0xA
                 ; 0000 016E         Temp_Data = Temp_Data | (temp << r);
                 ; 0000 016F     }
                +
0002ed 5f2f     +SUBI R18 , LOW ( - 1 )
0002ee 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002ef cfeb      	RJMP _0x55
                 _0x56:
                 ; 0000 0170 
                 ; 0000 0171     DMC = 1;
0002f0 9a90      	SBI  0x12,0
                 ; 0000 0172     D1 = 0x00;
0002f1 d04a      	RCALL SUBOPT_0xB
                 ; 0000 0173     D2 = ptrn[c];
                 ; 0000 0174     D1 = Temp_Data;
                 ; 0000 0175 
                 ; 0000 0176     }
                +
0002f2 5f4f     +SUBI R20 , LOW ( - 1 )
0002f3 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0002f4 cfc6      	RJMP _0x4A
                 _0x4B:
                 ; 0000 0177 }
                 _0x2000001:
0002f5 940e 03b5 	CALL __LOADLOCR6
0002f7 9628      	ADIW R28,8
0002f8 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __7SEGPTRN:
000160           	.BYTE 0xA
                 _ptrn:
00016a           	.BYTE 0x8
                 _food:
000172           	.BYTE 0x2
                 _last:
000174           	.BYTE 0x2
                 _head:
000176           	.BYTE 0x100
                 _map:
000276           	.BYTE 0x100
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0002f9 e0e5      	LDI  R30,LOW(5)
0002fa e0f0      	LDI  R31,HIGH(5)
0002fb 15ea      	CP   R30,R10
0002fc 05fb      	CPC  R31,R11
0002fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
0002fe 940e 0352 	CALL __LSLW4
000300 58ea      	SUBI R30,LOW(-_map)
000301 4ffd      	SBCI R31,HIGH(-_map)
000302 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x2:
000303 0fee      	LSL  R30
000304 1fff      	ROL  R31
000305 0fae      	ADD  R26,R30
000306 1fbf      	ADC  R27,R31
000307 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000308 e7a6      	LDI  R26,LOW(_head)
000309 e0b1      	LDI  R27,HIGH(_head)
00030a cff8      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00030b 93ec      	ST   X,R30
00030c 01f8      	MOVW R30,R16
00030d e7a6      	LDI  R26,LOW(_head)
00030e e0b1      	LDI  R27,HIGH(_head)
00030f 0fee      	LSL  R30
000310 1fff      	ROL  R31
000311 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000312 01f2      	MOVW R30,R4
000313 e7a6      	LDI  R26,LOW(_head)
000314 e0b1      	LDI  R27,HIGH(_head)
000315 0fee      	LSL  R30
000316 1fff      	ROL  R31
000317 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000318 0fae      	ADD  R26,R30
000319 1fbf      	ADC  R27,R31
00031a 9611      	ADIW R26,1
00031b 91ec      	LD   R30,X
00031c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00031d e7a6      	LDI  R26,LOW(_head)
00031e e0b1      	LDI  R27,HIGH(_head)
00031f 0fee      	LSL  R30
000320 1fff      	ROL  R31
000321 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
000322 91e0 0176 	LDS  R30,_head
000324 e0f0      	LDI  R31,0
000325 93fa      	ST   -Y,R31
000326 93ea      	ST   -Y,R30
                +
000327 91e0 0177+LDS R30 , _head + ( 1 )
                 	__GETB1MN _head,1
000329 e0f0      	LDI  R31,0
00032a 93fa      	ST   -Y,R31
00032b 93ea      	ST   -Y,R30
00032c e0a1      	LDI  R26,LOW(1)
00032d e0b0      	LDI  R27,0
00032e cf66      	RJMP _SET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
00032f 940e 03a6 	CALL __GETW1P
000331 940e 03aa 	CALL __CPW01
000333 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
000334 83ee      	STD  Y+6,R30
000335 83ff      	STD  Y+6+1,R31
000336 2fe2      	MOV  R30,R18
000337 81ae      	LDD  R26,Y+6
000338 940e 034a 	CALL __LSLB12
00033a 2b1e      	OR   R17,R30
00033b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xB:
00033c e0e0      	LDI  R30,LOW(0)
00033d bbeb      	OUT  0x1B,R30
00033e e6aa      	LDI  R26,LOW(_ptrn)
00033f e0b1      	LDI  R27,HIGH(_ptrn)
000340 0fa4      	ADD  R26,R20
000341 1fb5      	ADC  R27,R21
000342 91ec      	LD   R30,X
000343 bbe5      	OUT  0x15,R30
000344 bb1b      	OUT  0x1B,R17
000345 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGW1:
000346 95f1      	NEG  R31
000347 95e1      	NEG  R30
000348 40f0      	SBCI R31,0
000349 9508      	RET
                 
                 __LSLB12:
00034a 23ee      	TST  R30
00034b 2e0e      	MOV  R0,R30
00034c 2fea      	MOV  R30,R26
00034d f019      	BREQ __LSLB12R
                 __LSLB12L:
00034e 0fee      	LSL  R30
00034f 940a      	DEC  R0
000350 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000351 9508      	RET
                 
                 __LSLW4:
000352 0fee      	LSL  R30
000353 1fff      	ROL  R31
                 __LSLW3:
000354 0fee      	LSL  R30
000355 1fff      	ROL  R31
                 __LSLW2:
000356 0fee      	LSL  R30
000357 1fff      	ROL  R31
000358 0fee      	LSL  R30
000359 1fff      	ROL  R31
00035a 9508      	RET
                 
                 __MULW12U:
00035b 9ffa      	MUL  R31,R26
00035c 2df0      	MOV  R31,R0
00035d 9feb      	MUL  R30,R27
00035e 0df0      	ADD  R31,R0
00035f 9fea      	MUL  R30,R26
000360 2de0      	MOV  R30,R0
000361 0df1      	ADD  R31,R1
000362 9508      	RET
                 
                 __MULW12:
000363 d034      	RCALL __CHKSIGNW
000364 dff6      	RCALL __MULW12U
000365 f40e      	BRTC __MULW121
000366 dfdf      	RCALL __ANEGW1
                 __MULW121:
000367 9508      	RET
                 
                 __DIVW21U:
000368 2400      	CLR  R0
000369 2411      	CLR  R1
00036a e190      	LDI  R25,16
                 __DIVW21U1:
00036b 0faa      	LSL  R26
00036c 1fbb      	ROL  R27
00036d 1c00      	ROL  R0
00036e 1c11      	ROL  R1
00036f 1a0e      	SUB  R0,R30
000370 0a1f      	SBC  R1,R31
000371 f418      	BRCC __DIVW21U2
000372 0e0e      	ADD  R0,R30
000373 1e1f      	ADC  R1,R31
000374 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000375 60a1      	SBR  R26,1
                 __DIVW21U3:
000376 959a      	DEC  R25
000377 f799      	BRNE __DIVW21U1
000378 01fd      	MOVW R30,R26
000379 01d0      	MOVW R26,R0
00037a 9508      	RET
                 
                 __DIVW21:
00037b d01c      	RCALL __CHKSIGNW
00037c dfeb      	RCALL __DIVW21U
00037d f40e      	BRTC __DIVW211
00037e dfc7      	RCALL __ANEGW1
                 __DIVW211:
00037f 9508      	RET
                 
                 __MODW21:
000380 94e8      	CLT
000381 ffb7      	SBRS R27,7
000382 c004      	RJMP __MODW211
000383 95a0      	COM  R26
000384 95b0      	COM  R27
000385 9611      	ADIW R26,1
000386 9468      	SET
                 __MODW211:
000387 fdf7      	SBRC R31,7
000388 dfbd      	RCALL __ANEGW1
000389 dfde      	RCALL __DIVW21U
00038a 01fd      	MOVW R30,R26
00038b f40e      	BRTC __MODW212
00038c dfb9      	RCALL __ANEGW1
                 __MODW212:
00038d 9508      	RET
                 
                 __MANDW12:
00038e 94e8      	CLT
00038f fff7      	SBRS R31,7
000390 c002      	RJMP __MANDW121
000391 dfb4      	RCALL __ANEGW1
000392 9468      	SET
                 __MANDW121:
000393 23ea      	AND  R30,R26
000394 23fb      	AND  R31,R27
000395 f40e      	BRTC __MANDW122
000396 dfaf      	RCALL __ANEGW1
                 __MANDW122:
000397 9508      	RET
                 
                 __CHKSIGNW:
000398 94e8      	CLT
000399 fff7      	SBRS R31,7
00039a c002      	RJMP __CHKSW1
00039b dfaa      	RCALL __ANEGW1
00039c 9468      	SET
                 __CHKSW1:
00039d ffb7      	SBRS R27,7
00039e c006      	RJMP __CHKSW2
00039f 95a0      	COM  R26
0003a0 95b0      	COM  R27
0003a1 9611      	ADIW R26,1
0003a2 f800      	BLD  R0,0
0003a3 9403      	INC  R0
0003a4 fa00      	BST  R0,0
                 __CHKSW2:
0003a5 9508      	RET
                 
                 __GETW1P:
0003a6 91ed      	LD   R30,X+
0003a7 91fc      	LD   R31,X
0003a8 9711      	SBIW R26,1
0003a9 9508      	RET
                 
                 __CPW01:
0003aa 2400      	CLR  R0
0003ab 160e      	CP   R0,R30
0003ac 060f      	CPC  R0,R31
0003ad 9508      	RET
                 
                 __SAVELOCR6:
0003ae 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003af 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003b0 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003b1 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003b2 931a      	ST   -Y,R17
0003b3 930a      	ST   -Y,R16
0003b4 9508      	RET
                 
                 __LOADLOCR6:
0003b5 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003b6 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003b7 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003b8 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003b9 8119      	LDD  R17,Y+1
0003ba 8108      	LD   R16,Y
0003bb 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  33 r1 :  10 r2 :   8 r3 :   0 r4 :  12 r5 :   5 r6 :   8 r7 :   3 
r8 :   9 r9 :   5 r10:   5 r11:   3 r12:   5 r13:   2 r14:   0 r15:   2 
r16:  24 r17:  19 r18:  15 r19:  11 r20:   8 r21:   6 r22:   4 r23:   2 
r24:   9 r25:   8 r26:  92 r27:  39 r28:   6 r29:   1 r30: 287 r31: 100 
x  :  17 y  :  93 z  :  12 
Registers used: 33 out of 35 (94.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  11 add   :  13 
adiw  :  13 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   7 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   8 
brge  :  13 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   5 brmi  :   2 brne  :  15 brpl  :   0 brsh  :   1 brtc  :   4 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  14 
cbi   :   1 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  18 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   4 
cp    :  16 cpc   :  22 cpi   :  14 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   1 jmp   :  22 ld    :  37 ldd   :  17 ldi   : 143 
lds   :  25 lpm   :   7 lsl   :  11 lsr   :   0 mov   :   6 movw  :  50 
mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   3 out   :  36 pop   :   0 push  :   0 rcall :  58 ret   :  31 
reti  :   3 rjmp  :  41 rol   :  12 ror   :   0 sbc   :   1 sbci  :  12 
sbi   :   1 sbic  :   0 sbis  :   5 sbiw  :  10 sbr   :   1 sbrc  :   2 
sbrs  :   5 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  55 std   :   6 sts   :  16 sub   :   1 subi  :  17 swap  :   0 
tst   :   3 wdr   :   0 
Instructions used: 62 out of 116 (53.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000778   1862     50   1912   16384  11.7%
[.dseg] 0x000060 0x000376      0    534    534    1024  52.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
